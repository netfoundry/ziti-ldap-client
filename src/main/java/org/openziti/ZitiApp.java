package org.openziti;


import org.apache.commons.io.IOUtils;
import org.openziti.identity.Enroller;
import org.slf4j.LoggerFactory;

import java.io.*;
import java.net.InetAddress;
import java.security.*;
import java.security.cert.CertificateException;
import java.util.Base64;

public class ZitiApp {

    private final static org.slf4j.Logger log = LoggerFactory.getLogger(ZitiApp.class);

    private static final String TEMP_FILE_PREFIX = "token";

    private static final String TEMP_FILE_SUFFIX = "jwt";

    private static final char[] NO_PASSWORD = {};

    private final ZitiContext context;

    private ZitiApp(ZitiContext context) {
        this.context = context;
    }

    public static class CredentialBuilder {
        private File json;
        private File keyStore;

        public CredentialBuilder(){
            this.json = null;
            this.keyStore = null;
        }

        /**
         * Build ziti context using the endpoint identity generated in json format by the ziti tunneler during enrollment
         * @param json endpoint identity in json format generated by ziti tunneler during enrollment
         * @return ziticontext for the identity
         */
        public CredentialBuilder fromJson(String json) {
            InputStream jwtInStream = null;
            OutputStream jwtOutStream = null;
            try {
                this.json = File.createTempFile(TEMP_FILE_PREFIX,TEMP_FILE_SUFFIX);
                jwtInStream = new ByteArrayInputStream(json.getBytes());
                jwtOutStream = new FileOutputStream(this.json);
                IOUtils.copy(jwtInStream, jwtOutStream);
            } catch (Exception e) {
                throw new IllegalArgumentException(String.format("Failed to read credentials - cause : %s",e));
            }finally {
                try {
                    if(jwtOutStream!=null)
                        jwtOutStream.close();

                    if(jwtInStream!=null)
                        jwtInStream.close();

                } catch (IOException e) {
                    log.error("Failed to read credentials - cause : ",e);
                }
            }
            return this;
        }

        /**
         * Build ziti context using the endpoint identity generated in keystore format by the ziti sdk during enrollment
         * @param encodedKeyStore base64 encoded string containing the keystore file
         * @return ziticontext for the identity
         */
        public CredentialBuilder fromKey(String encodedKeyStore){
            OutputStream ksOutStream = null;

            try {
                this.keyStore = File.createTempFile(TEMP_FILE_PREFIX,TEMP_FILE_SUFFIX);
                byte[] keystoreBytes = Base64.getDecoder().decode(encodedKeyStore);
                KeyStore ks = KeyStore.getInstance("PKCS12");
                ks.load(new ByteArrayInputStream(keystoreBytes), "".toCharArray());
                ksOutStream = new FileOutputStream(this.keyStore);
                ks.store(ksOutStream,NO_PASSWORD);

            } catch (IOException | NoSuchAlgorithmException | CertificateException | KeyStoreException e) {
                throw new IllegalArgumentException(String.format("Failed to read credentials - cause : %s",e));
            } finally {
                try {
                    if(ksOutStream!=null)
                        ksOutStream.close();
                } catch (IOException e) {
                    log.error("Failed to read credentials - cause : ",e);
                }
            }
            return this;
        }

        /**
         * @return ziti context
         */
        public ZitiApp build(){
            if(json !=null)
                return new ZitiApp(Ziti.newContext(json,NO_PASSWORD));

            return new ZitiApp(Ziti.newContext(keyStore,NO_PASSWORD));
        }
    }

    /**
     * Ziti endpoint enrollment
     * @param tokenStream jwt file containing endpoint one time enrollment token
     * @return base64 encoded string containing ziti identity in keystore format
     */
    public static String enroll(InputStream tokenStream) {

        String identity;

        ByteArrayOutputStream stream = null;

        try {
            KeyStore ks = KeyStore.getInstance("PKCS12");
            ks.load(null,null);

            Enroller enroller = Enroller.fromJWT(new String(tokenStream.readAllBytes()));

            enroller.enroll(null,ks, InetAddress.getLocalHost().getHostName());

            stream = new ByteArrayOutputStream();

            ks.store(stream,"".toCharArray());

            identity = Base64.getEncoder().encodeToString(stream.toByteArray());

            log.info("Enrolled Identity : {}",identity);

        } catch (KeyStoreException | CertificateException | IOException | NoSuchAlgorithmException e) {
            throw new IllegalArgumentException(String.format("Failed to enroll endpoint - cause : %s",e));
        } finally {
            if(stream!=null){
                try {
                    stream.flush();
                    stream.close();
                } catch (IOException e) {
                    log.error("Failed to enroll endpoint - cause : ",e);
                }
            }
        }
        return identity;
    }

    public ZitiContext getContext() {
        return this.context;
    }
}
